<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>设计模式 on 个人笔记</title>
    <link>http://zhaoguibin.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
    <description>Recent content in 设计模式 on 个人笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 26 Mar 2022 21:19:21 +0000</lastBuildDate>
    <atom:link href="http://zhaoguibin.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>迭代器模式</title>
      <link>http://zhaoguibin.me/posts/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 26 Mar 2022 21:19:21 +0000</pubDate>
      <guid>http://zhaoguibin.me/posts/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid>
      <description>概念
迭代器模式是遍历集合的成熟模式，迭代器模式的关键是将遍历集合的任务交给一个叫做迭代器的对象，它的工作是遍历并选择序列中的对象，而客户端程序员不必知道或关心该集合序列底层的结构。
说明
迭代器模式（Iterator），又叫做游标（Cursor）模式，提供一种方法访问一个容器（Container）对象中各个元素，而又不需要暴露该对象的内部细节。 当你需要访问一个聚合对象，而且不管这些对象是什么都需要遍历的时候，就应该考虑使用迭代器模式。另外，当需要对聚集有多种方式遍历时，可以考虑去使用迭代器模式。迭代器模式为遍历不同的聚合结构提供如开始、下一个、是否结束、当前哪一项等统一的接口。 作用 我们想要像遍历数组那样，遍历对象，或是遍历一个容器。 迭代器模式可以隐藏遍历元素所需的操作 应用场景 访问一个聚合对象的内容而无需暴露它的内部表示 支持对聚合对象的多种遍历 为遍历不同的聚合结构提供一个统一的接口。 角色 Iterator（迭代器）：迭代器定义访问和遍历元素的接口 ConcreteIterator（具体迭代器）：具体迭代器实现迭代接口，对该聚合遍历时跟踪当前位置 Aggregate（聚合）：聚合定义创建相应迭代器对象的接口。 ConcreteAggregate（具体聚合）：具体聚合实现创建相应迭代器的接口，该操作返回ConcreteIterator的一个适当的实例。 &amp;lt;?php //自定义迭代器实现系统定义迭代器接口 class MyIterator implements Iterator { protected $data = []; protected $index; public function __construct($data) { $this-&amp;gt;data = $data; $this-&amp;gt;index = 0; } //返回第一个元素 public function rewind() { $this-&amp;gt;index = 0; } //下一个元素 public function next() { $this-&amp;gt;index++; } //验证是否继续 public function valid() { return $this-&amp;gt;index &amp;lt; count($this-&amp;gt;data); } //返回key值 public function key() { return $this-&amp;gt;index; } //返回当前元素 public function current() { return $this-&amp;gt;data[$this-&amp;gt;index]; } } $arr = [1, 2, 3, 4, 5, 6]; $iterate = new MyIterator($arr); foreach ($iterate as $dynasty) { echo &amp;#39;the obj == &amp;#39; .</description>
    </item>
    <item>
      <title>命令模式</title>
      <link>http://zhaoguibin.me/posts/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 26 Mar 2022 21:15:24 +0000</pubDate>
      <guid>http://zhaoguibin.me/posts/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</guid>
      <description>概念 将一个请求封装（命令的封装）为一个对象，从而使用你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。 命令模式是对命令的封装。命令模式把发出命令的责任和执行命令的责任分隔开，委派给不同的对象。 请求的一方发出请求要求执行一个操作；接收的一方收到请求，并执行操作。命令模式允许请求的一方和接收的一方独立开来，使得请求的一方不必知道接收请求的一方的接口，更不必知道请求是怎么被接收，以及操作是否被执行、何时被执行，以及是怎么被执行的。 角色 命令（command）角色：声明了一个给所有具体命令类的抽象接口。这是一个抽象角色。 具体命令（ConcreteCommand）角色：定义一个接收者和行为之间的弱耦合；实现Execute()方法，负责调用接收到的相应操作。Execute()方法通常叫做执行方法。 客户（client）角色：创建了一个具体命令（ConcreteCommand）对象并确定其接收者。 请求者（Invoker）角色：负责调用命令对象执行请求，相关的方法叫做行动方法。 接收者（Receiver）角色：负责具体实施和执行一个请求。任何一个类都可以成为接收者，实施和执行请求的方法叫做行动方法。 优点和缺点 优点： 命令模式把请求一个操作的对象与知道怎么执行一个操作的对象分离开。 命令类与其他任何别的类一样，可以修改和推广。 可以把命令对象聚合在一起，合成为合成命令。 可以很容易的加入新的命令类。 缺点： 可能会导致某些系统有过多的具体命令类。 应用场景 抽象出待执行的动作以参数化对象。Command模式是回调机制的一个面向对象的替代品。 在不同的时刻指定、排列和执行请求。 支持取消操作 支持修改日志 用构建在原语操作上的高层操作构建一个系统。Command模式提供了对事务进行建模的方法。Command有一个公共的接口，使得你可以用同一种方式调用所有的事务。同时使用该模式也易于添加新事务以扩展系统。 &amp;lt;?php //抽象命令接口 interface Command { //命令执行 public function execute(); } //宏命令（命令的组合） //宏命令接口 interface MacroCommand extends Command { //宏命令聚集管理方法，可以删除一个命令 public function remove(Command $command); //宏命令聚集管理方法，可以添加一个命令 public function add(Command $command); } //命令的实现 //复制命令 class CopyCommand implements Command { private $receiver; public function __construct(Receiver $receiver) { $this-&amp;gt;receiver = $receiver; } public function execute() { $this-&amp;gt;receiver-&amp;gt;copy(); } } //粘贴命令 class PasteCommand implements Command { private $receiver; public function __construct(Receiver $receiver) { $this-&amp;gt;receiver = $receiver; } public function execute() { $this-&amp;gt;receiver-&amp;gt;paste(); } } //命令接收者执行命令 class Receiver { private $name; public function __construct($name) { $this-&amp;gt;name = $name; } public function copy() { echo $this-&amp;gt;name .</description>
    </item>
    <item>
      <title>观察者模式</title>
      <link>http://zhaoguibin.me/posts/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 26 Mar 2022 20:45:21 +0000</pubDate>
      <guid>http://zhaoguibin.me/posts/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>概念 观察者模式属于行为模式，是定义对象间的一种一对多的依赖关系，以便当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并自动刷新。 当一个对象状态发生改变后，会影响到其他几个对象的改变，这时候可以用观察者模式。 观察者模式符合接口隔离原则，实现了对象之间的松散耦合。 角色 抽象主题（subject）：它把所有观察者对象的引用保存到一个聚集里，每个主题都可以有任何数量的观察者。抽象主题提供一个接口，可以增加和删除观察者对象。 具体主题（ConcreteSubjest）：将有关状态存入具体观察者对象；在具体主题内部状态改变时，给所有登记过的观察者发出通知。 抽象观察者（Observer）：为所有的具体观察者定义一个接口，在得到主题通知时更新自己。 具体观察者（ConcreteObserver）：实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题状态协调。 &amp;lt;?php //抽象主题 interface Subject { //新增观察者 public function attach(Observer $observer); //移除观察者 public function detach(Observer $observer); //通知观察者 public function notifyObserver(); } //具体主题 class ConcreteSubjest implements Subject { //储存观察者 private $observers; public function __construct() { $this-&amp;gt;observers = []; } //新增观察者 public function attach(Observer $observer) { return array_push($this-&amp;gt;observers, $observer); } //移除观察者 public function detach(Observer $observer) { //检查观察者是否存在观察者数组中，返回索引值 $index = array_search($observer, $this-&amp;gt;observers); if ($index === false) { return false; } else { unset($this-&amp;gt;observers[$index]); return true; } } //通知观察者 public function notifyObserver() { if (!</description>
    </item>
    <item>
      <title>策略模式</title>
      <link>http://zhaoguibin.me/posts/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 26 Mar 2022 20:31:47 +0000</pubDate>
      <guid>http://zhaoguibin.me/posts/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</guid>
      <description> 概念 将一组特定的行为和算法封装成类，以适应某些特定的上下文环境，并让它们可以相互替换，这种模式就是策略模式。 简单理解就是 有n个做法供你选择，根据你的需要选择某个策略得到结果 优点 使用设计模式之后，我们的代码冗余和耦合度变低，每个策略模块完成对应的功能。 当然缺点就是一个功能我们就要响应制作一个策略类，但是我们统观MVC架构当中（Thinkphp，Yii2），一个控制器对应一个视图，其实也是策略模式的体现了。 &amp;lt;?php interface UserInterface { public function showAd(); public function showCategory(); } //男性用户实现接口 class MaleUser implements UserInterface { public function showAd() { echo &amp;#39;电子产品&amp;#39;; } public function showCategory() { echo &amp;#34;PS5,PC,Switch&amp;#34;; } } //女性用户实现接口 class FemaleUser implements UserInterface { public function showAd() { echo &amp;#39;化妆品&amp;#39;; } public function showCategory() { echo &amp;#34;口红,面膜&amp;#34;; } } //客户端实现，根据性别不同推荐不同内容 $sex = &amp;#39;male&amp;#39;; if ($sex == &amp;#39;male&amp;#39;) { $user = new MaleUser(); } else { $user = new FemaleUser(); } $user-&amp;gt;showAd(); $user-&amp;gt;showCategory(); </description>
    </item>
    <item>
      <title>装饰器模式</title>
      <link>http://zhaoguibin.me/posts/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 24 Mar 2022 23:13:56 +0000</pubDate>
      <guid>http://zhaoguibin.me/posts/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid>
      <description> 概念
装饰器模式又叫装饰者模式。装饰模式是在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。
实例
组件对象的接口：可以给这些对象动态的添加职责 所有装饰器的父类：需要定义一个与组件接口一直的接口，并持有一个component对象，该对象其实就是被装饰的对象。 具体的装饰器类：实现具体要向被装饰对象添加的功能。用来装饰具体的组件对象或者另外一个具体的装饰器对象。 使用场景
需要动态的给一个对象添加功能，这些功能可以再动态的撤销 需要添加由一些基本功能的排列组合而产生的非常大量的功能，从而使继承关系变的不现实。 当不能采用生成子类的方法进行扩充时。一种情况是，可能有大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长。另一种情况可能是因为类定义被隐藏，或类定义不能用于生成子类。 &amp;lt;?php //组件对象接口 interface IComponent { //动态给对象添加功能 public function display(); } //待装饰的对象 class Person implements IComponent { protected $name; public function __construct($name) { $this-&amp;gt;name = $name; } public function display() { echo &amp;#39;装饰的&amp;#39; . $this-&amp;gt;name; } } //所有装饰器的父类 class Clothes implements IComponent { protected $component; public function Decorate(IComponent $component) { $this-&amp;gt;component = $component; } public function display() { if (!empty($this-&amp;gt;component)) { $this-&amp;gt;component-&amp;gt;display(); } } } //具体的装饰器 class Pixie extends Clothes { public function display() { echo &amp;#39;皮鞋&amp;#39;; parent::display(); } } class Waitao extends Clothes { public function display() { echo &amp;#39;外套&amp;#39;; parent::display(); } } //客户端 $gd = new Person(&amp;#39;狗蛋&amp;#39;); $px = new Pixie(); $px-&amp;gt;Decorate($gd); $px-&amp;gt;display(); $wt = new Waitao(); $wt-&amp;gt;Decorate($gd); $wt-&amp;gt;display(); </description>
    </item>
    <item>
      <title>注册树模式</title>
      <link>http://zhaoguibin.me/posts/%E6%B3%A8%E5%86%8C%E6%A0%91%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 24 Mar 2022 22:39:41 +0000</pubDate>
      <guid>http://zhaoguibin.me/posts/%E6%B3%A8%E5%86%8C%E6%A0%91%E6%A8%A1%E5%BC%8F/</guid>
      <description> 概念
注册树模式也叫注册模式或注册器模式，顾名思义，注册树就是把对象实例注册到一棵全局的对象树上，需要对象的时候就从树上取下来，就好比树上长的果子，需要的时候就摘一个下来，只是这个对象树果子是摘不完的。
作用
不管是单例模式还是工厂模式建立的对象，都没有得到很好的管理，用了注册树模式，就可以把创建出来的对象注册到全局树上，需要的时候取下来用，可以很好的管理创建的对象。
&amp;lt;?php class DbMysql { public function conn() { echo &amp;#39;mysql conn&amp;#39;; } } class DbSqlite { public function conn() { echo &amp;#39;sqlite conn&amp;#39;; } } class MysqlFactory { public static function getIns() { return new DbMysql(); } } class SqliteFactory { public static function getIns() { return new DbSqlite(); } } //注册树实现存储对象（IOC控制反转思想） class RegisterTree { protected static $objects; //添加对象到注册树中 public static function set($alias, $object) { self::$objects[$alias] = $object; } //从注册树中获取对象 public static function get($alias) { return self::$objects[$alias]; } //销毁注册树上的对象 public static function _unset($alias) { unset(self::$objects[$alias]); } } //注册 RegisterTree::set(&amp;#39;mysql&amp;#39;, MysqlFactory::getIns()); RegisterTree::set(&amp;#39;sqlite&amp;#39;, SqliteFactory::getIns()); //客户端 // $mysql = RegisterTree::get(&amp;#39;mysql&amp;#39;); // $mysql-&amp;gt;conn(); // $sqlite = RegisterTree::get(&amp;#39;sqlite&amp;#39;); // $sqlite-&amp;gt;conn(); class Facade { public static $mysql; public static $sqlite; public function __construct() { self::$mysql = RegisterTree::get(&amp;#39;mysql&amp;#39;); self::$sqlite = RegisterTree::get(&amp;#39;sqlite&amp;#39;); } } new Facade(); Facade::$mysql-&amp;gt;conn(); Facade::$sqlite-&amp;gt;conn(); </description>
    </item>
    <item>
      <title>门面模式</title>
      <link>http://zhaoguibin.me/posts/%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 24 Mar 2022 22:15:37 +0000</pubDate>
      <guid>http://zhaoguibin.me/posts/%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F/</guid>
      <description> 概念
门面模式（facade）又称外观模式，用于为子系统中的一组接口提供一个一致的界面。门面模式定义了一个高层接口，这个接口使得子系统更加容易使用；引入门面角色之后，用户只需要直接与门面角色交互，用户与子系统之间的复杂关系由门面角色来实现，从而降低了系统的耦合度。
作用
为一些复杂的子系统提供一组接口。 提高子系统的独立性 在层次化结构中，可以使用门面模式定义系统的每一层的接口 优点
它对于客户屏蔽了子系统组件，因而减少了客户处理的对象的数目并使得子系统使用起来更加方便。 实现了子系统与客户之间的松耦合关系。 如果应用需要，它并不限制它们使用子系统类。因此可以在系统易用性与能用性之间加以选择。 &amp;lt;?php class Camera { public function turnOn() { echo &amp;#39;turn on camera&amp;#39;; } public function turnOff() { echo &amp;#39;turn off camera&amp;#39;; } } class Light { public function turnOn() { echo &amp;#39;turn on light&amp;#39;; } public function turnOff() { echo &amp;#39;turn off light&amp;#39;; } } //门面类 class Facade { private $camera; private $light; public function __construct() { $this-&amp;gt;camera = new Camera(); $this-&amp;gt;light = new Light(); } //启动接口 public function activate() { $this-&amp;gt;camera-&amp;gt;turnOn(); $this-&amp;gt;light-&amp;gt;turnOn(); } //关闭接口 public function deactivate() { $this-&amp;gt;camera-&amp;gt;turnOff(); $this-&amp;gt;light-&amp;gt;turnOff(); } } //客户端 class Client { private static $securit; public static function main() { self::$securit = new Facade(); self::$securit-&amp;gt;activate(); self::$securit-&amp;gt;deactivate(); } } Client::main(); </description>
    </item>
    <item>
      <title>管道模式</title>
      <link>http://zhaoguibin.me/posts/%E7%AE%A1%E9%81%93%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 24 Mar 2022 21:48:18 +0000</pubDate>
      <guid>http://zhaoguibin.me/posts/%E7%AE%A1%E9%81%93%E6%A8%A1%E5%BC%8F/</guid>
      <description> 概念
管道（pipeline）设计模式流水线模式就是将数据传递到一个任务序列中，管道扮演着流水线的角色，数据在这里被处理然后传递到下一个步骤
释义
管道，顾名思义，就是一个长长的流水管道，只不过加了许多阀门。所以管道模式大致需要三个角色：管道、阀门、载荷（流水）。
目的是在管道中对载荷进行一系列的处理。因为可以对过滤器进行动态的添加，所以对载荷的处理可以变得更加灵活。但同时带来的问题是，在过滤器过多时，很难把握整体的处理逻辑。而且在某一个过滤器对载荷处理后，因为载荷改变，会造成下一个过滤器中的逻辑出错。
&amp;lt;?php //管道接口 interface PipelineBuilder { public function __construct($payload); //$payload载荷 public function pipe(StageBuilder $stage); //管道与阀门 public function process(); //过程 } //实现管道接口 class Pipeline implements PipelineBuilder { protected $payload; protected $pipes = []; public function __construct($payload) { $this-&amp;gt;payload = $payload; } public function pipe(StageBuilder $stage) { $this-&amp;gt;pipes[] = $stage; return $this; } public function process() { foreach ($this-&amp;gt;pipes as $pipe) { call_user_func([$pipe, &amp;#39;handle&amp;#39;], $this-&amp;gt;payload); } } } //阀门类 interface StageBuilder { public function handle($payload); } //实现 class StageOneBuilder implements StageBuilder { public function handle($payload) { echo &amp;#39;one-&amp;#39;; } } class StageTwoBuilder implements StageBuilder { public function handle($payload) { echo &amp;#39;two-&amp;#39;; } } //客户端使用 $pipeline = new PipeLine(&amp;#39;step&amp;#39;); $pipeline-&amp;gt;pipe(new StageOneBuilder())-&amp;gt;pipe(new StageTwoBuilder())-&amp;gt;process(); </description>
    </item>
    <item>
      <title>代理模式</title>
      <link>http://zhaoguibin.me/posts/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 24 Mar 2022 21:23:46 +0000</pubDate>
      <guid>http://zhaoguibin.me/posts/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</guid>
      <description> 概念
构建了透明置于两个不同对象之内的一个对象，从而能够截取或代理这两个对象间的通信或访问。
应用场景
远程代理：也就是为了一个对象在不同地址空间提供局部代表。隐藏一个对象存在于不同地址空间的事实。 虚拟代理：根据需求来创建开销很大的对象，通过它来存放实例化需要很长时间的真实对象。 安全代理：用来控制真实对象的访问对象。 智能指引：当调用真实对象的时候，代理处理一些事情。 &amp;lt;?php //真实类 interface Subject { public function request(); } class RealSubject implements Subject { public function request() { echo &amp;#39;真实的操作&amp;#39;; } } //代理模式代理真实类 class Proxy implements Subject { protected $realSubject; public function __construct() { $this-&amp;gt;realSubject = new RealSubject(); } public function request() { echo &amp;#39;代理操作&amp;#39;; $this-&amp;gt;realSubject-&amp;gt;request(); } } //客户端 $proxy = new Proxy(); $proxy-&amp;gt;request(); 注意事项 代理模式的实现其实非常简单，或许你在不经意间经常会用到 请注意代理模式与装饰器、适配器的区别 装饰器：一般是对对象进行装饰，其中的方法行为会有增加，以修饰对象为主 适配器：一般会改变方法行为，目的是保持接口的统一但得到不同的实现 代理模式有几种形式：远程代理（例如：第三方接口SDK）、虚代理（例如：异步加载图片）、保护代理&amp;amp;智能指引（例如：权限保护），而我们代码实现的最普通的代理，其实就是让代理类来代替真实类的操作 </description>
    </item>
    <item>
      <title>适配器模式</title>
      <link>http://zhaoguibin.me/posts/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 23 Mar 2022 21:48:23 +0000</pubDate>
      <guid>http://zhaoguibin.me/posts/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid>
      <description> 概念
将某个类的接口转换成与另一个接口兼容。适配器通过将原始接口进行转换，给用户提供一个兼容接口，使得原来因为接口不同而无法一起使用的类可以得到兼容。
应用场景
老代码接口不适应新的接口需求，或者代码很多很乱不便于继续修改，或者使用第三方类库。
&amp;lt;?php interface Weather { public function show(); } class PhpWeather implements Weather { public function show() { $weatherInfo = [&amp;#39;weather&amp;#39; =&amp;gt; &amp;#39;雨&amp;#39;, &amp;#39;tep&amp;#39; =&amp;gt; 6, &amp;#39;wind&amp;#39; =&amp;gt; 3]; return serialize($weatherInfo); } } //兼容模式 使得java能够直接使用 interface WeatherA { public function getWeather(); } class JavaWeather implements WeatherA { protected $weather; public function __construct(Weather $weather) { $this-&amp;gt;weather = $weather; } public function getWeather() { $info = unserialize($this-&amp;gt;weather-&amp;gt;show()); return json_encode($info); } } $weather = new PhpWeather(); // $info = unserialize($weather); // var_dump($info); $java_weather = new JavaWeather($weather); $info = json_decode($java_weather-&amp;gt;getWeather()); var_dump($info); </description>
    </item>
    <item>
      <title>工厂模式</title>
      <link>http://zhaoguibin.me/posts/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 22 Mar 2022 21:25:26 +0000</pubDate>
      <guid>http://zhaoguibin.me/posts/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
      <description>概念
工厂模式是我们最常用的实例化对象模式，是用工厂方法代替new操作的一种模式。
好处
使用工厂模式的好处是，如果你想要更改所实例化的类名等，则只需要更改该工厂方法内容即可，不需要逐一寻找代码中具体实例化的地方（new 处）修改了。为系统结构提供灵活的动态扩展机制，减少了耦合。
分类
简单工厂模式 工厂方法模式 抽象工厂模式 简单工厂模式
简单工厂模式又称静态工厂模式，之所以可以这么说，是因为简单工厂模式是通过一个静态方法来创建对象的
&amp;lt;?php class DbMysql { public function conn() { echo &amp;#34;连接MySQL&amp;#34;; } } class DbSqlite { public function conn() { echo &amp;#34;连接SQLite&amp;#34;; } } class DbFactory { public static function createIns($type) { switch ($type) { case &amp;#39;mysql&amp;#39;: return DbMysql(); break; case &amp;#39;sqlite&amp;#39;: return new DbSqlite(); break; default: throw new ErrorException(&amp;#39;类型错误&amp;#39;); } } } $mysql = DbFactory::createIns(&amp;#39;mysql&amp;#39;); $mysql-&amp;gt;conn(); $sqlite = DbFactory::createIns(&amp;#39;sqlite&amp;#39;); $sqlite-&amp;gt;conn(); 工厂方法模式</description>
    </item>
    <item>
      <title>单例模式</title>
      <link>http://zhaoguibin.me/posts/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 22 Mar 2022 20:49:17 +0000</pubDate>
      <guid>http://zhaoguibin.me/posts/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description> 概念
是一种类的设计只会最多产生一个对象的设计思想
作用
php的应用主要在于数据库应用，所以一个应用中会存在大量的数据库操作，使用单例模式，则可以避免大量的new操作消耗的资源。 如果系统中需要有一个类来全局控制某些配置信息，那么使用单例模式可以很方便的实现。 再一次页面请求中，便于进行调试，因为所有的代码都会集中在一个类里面，我们可以在类中设置钩子，输出日志，从而避免到处var_dump，echo。 应用场景
数据库连接，缓存操作，分布式储存
单例模式的要点
构造函数需要标记为private（访问控制：防止外部代码使用new操作符创建对象），单例类不能在其他类中实例化，只能被其自身实例化。 拥有一个保存类的实例的静态成员变量。 拥有一个访问这个实例的公共的静态方法（常用getInstance()方法进行实例化单例类，通过instanceof操作符可以检测到类是否已经被实例化） 简称 三私一公： 私有化构造方法：不让在外部产生多个对象 私有化克隆方法：不允许对象被克隆产生新对象 私有化静态属性：运行进入类内部产生对象 公有化静态方法：保存已经产生的对象 &amp;lt;?php //单例 class Uni{ //创建静态私有的变量保存该类对象 static private $instance; //参数 private $config; //防止直接创建对象 private function __construct($config){ $this -&amp;gt; config = $config; echo &amp;#34;我被实例化了&amp;#34;; } //防止克隆对象 private function __clone(){ } static public function getInstance($config){ //判断$instance是否是Uni的对象 //没有则创建 if (!self::$instance instanceof self) { self::$instance = new self($config); } return self::$instance; } public function getName(){ echo $this -&amp;gt; config; } } $db1 = Uni::getInstance(1); $db1 -&amp;gt; getName(); echo &amp;#34;&amp;lt;br&amp;gt;&amp;#34;; $db2 = Uni::getInstance(4); $db2 -&amp;gt; getName(); /** *运行结果： *我被实例化了1 *1 *$db1创建对象后，参数是1 *$db2没有创建对象，而是直接使用$instance保存的唯一对象，所以输出的参数并没有变为4； */ </description>
    </item>
    <item>
      <title>什么是设计模式</title>
      <link>http://zhaoguibin.me/posts/%E4%BB%80%E4%B9%88%E6%98%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 21 Mar 2022 22:11:16 +0000</pubDate>
      <guid>http://zhaoguibin.me/posts/%E4%BB%80%E4%B9%88%E6%98%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>什么是设计模式
设计模式是一套被反复使用、容易被他人理解的、可靠的代码设计经验的总结。
那么我们常说的架构、框架和设计模式有什么关系呢？
架构是一套体系结构，是项目的整体解决方案； 框架是可供复用的半成品软件，是具体程序代码。 架构一般会涉及到采用什么样的框架来加速和优化某部分问题的解决，而好的框架代码里合理使用了很多设计模式。 比如：laravel框架中就使用到了很多的设计模式。其中包括单例模式，门面模式，注册树模式（DI/IOC），适配器模式，观察者模式等多种设计模式。
设计模式的目的是为了更好的代码重用性，可读性，可靠性，可维护性。
设计模式的作用
设计模式能解决：
替换杂乱无章的代码，形成良好的代码风格 代码易读，工程师们都能很容易理解 增加新功能时不用修改接口，可扩展性强 稳定性好，一般不会出现未知的问题 设计模式不能解决：
设计模式是用来组织你的代码的模板，而不是直接调用的库 设计模式并非最高效，但是代码的可读性和可维护性更重要 不要一味追求并套用设计模式，重构时多考虑 设计模式&amp;ndash;六大原则
单一职责原则
定义
不要存在多于一个导致类变更的原因。既一个类只负责一项职责。
场景
类T负责两个不同的职责；职责P1，职责P2，当由于职责P1需求发生改变而需要修改类T时，有可能会导致原本运行正常的职责P2功能发生故障。
&amp;lt;?php class Animal { public function bre($animal) { echo $animal.&amp;#34;呼吸空气&amp;#34;; } } class Program { public function main() { $animal = new Animal(); $animal-&amp;gt;bre(&amp;#39;猫&amp;#39;); $animal-&amp;gt;bre(&amp;#39;狗&amp;#39;); $animal-&amp;gt;bre(&amp;#39;鱼&amp;#39;); } } 修正
遵循单一职责原则。分别建立两个类T1、T2，使T1完成职责P1功能，T2完成职责P2功能。这样，当修改类T1时，不会使职责P2发生故障风险；同理，当修改T2时，也不会使职责P1发生故障风险。
&amp;lt;?php class Ter { public function bre($animal) { echo $animal.&amp;#34;呼吸空气&amp;#34;; } } class Aqu { public function bre($animal) { echo $animal.</description>
    </item>
  </channel>
</rss>
