<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Golang on 笔记</title>
    <link>http://zhaoguibin.me/tags/golang/</link>
    <description>Recent content in Golang on 笔记</description>
    <image>
      <title>笔记</title>
      <url>http://zhaoguibin.me/images/papermod-cover.png</url>
      <link>http://zhaoguibin.me/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 03 Jan 2024 21:51:21 +0000</lastBuildDate>
    <atom:link href="http://zhaoguibin.me/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang base64转图片</title>
      <link>http://zhaoguibin.me/posts/golang-base64%E8%BD%AC%E5%9B%BE%E7%89%87/</link>
      <pubDate>Wed, 03 Jan 2024 21:51:21 +0000</pubDate>
      <guid>http://zhaoguibin.me/posts/golang-base64%E8%BD%AC%E5%9B%BE%E7%89%87/</guid>
      <description>package main import ( &amp;#34;encoding/base64&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;io/ioutil&amp;#34; &amp;#34;os&amp;#34; &amp;#34;path/filepath&amp;#34; &amp;#34;strings&amp;#34; ) func main() { // 从命令行参数获取文件夹路径 if len(os.Args) &amp;lt; 2 { fmt.Println(&amp;#34;请提供要处理的文件夹路径&amp;#34;) return } folderPath := os.Args[1] // 检查文件夹是否存在 _, err := os.Stat(folderPath) if os.IsNotExist(err) { fmt.Println(&amp;#34;指定的文件夹路径不存在&amp;#34;) return } // 获取上级目录路径 parentFolderPath := filepath.Dir(folderPath) // 获取原始文件夹名称并创建保存图片的文件夹 imageFolderName := filepath.Base(folderPath) + &amp;#34;_image&amp;#34; imageFolderPath := filepath.Join(parentFolderPath, imageFolderName) err = os.Mkdir(imageFolderPath, 0755) if err != nil { fmt.Println(&amp;#34;无法创建图片文件夹:&amp;#34;, err) return } // 遍历文件夹 err = filepath.</description>
    </item>
    <item>
      <title>Golang图片转base64</title>
      <link>http://zhaoguibin.me/posts/golang%E5%9B%BE%E7%89%87%E8%BD%ACbase64/</link>
      <pubDate>Wed, 03 Jan 2024 21:45:21 +0000</pubDate>
      <guid>http://zhaoguibin.me/posts/golang%E5%9B%BE%E7%89%87%E8%BD%ACbase64/</guid>
      <description>package main import ( &amp;#34;encoding/base64&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;io/ioutil&amp;#34; &amp;#34;os&amp;#34; &amp;#34;path/filepath&amp;#34; ) func main() { // 从命令行参数获取文件夹路径 if len(os.Args) &amp;lt; 2 { fmt.Println(&amp;#34;请提供要处理的文件夹路径&amp;#34;) return } folderPath := os.Args[1] // 检查文件夹是否存在 _, err := os.Stat(folderPath) if os.IsNotExist(err) { fmt.Println(&amp;#34;指定的文件夹路径不存在&amp;#34;) return } // 获取上级目录路径 parentFolderPath := filepath.Dir(folderPath) // 获取原始文件夹名称 base64FolderName := filepath.Base(folderPath) + &amp;#34;_base64&amp;#34; // 创建保存 base64 文件的文件夹 base64FolderPath := filepath.Join(parentFolderPath, base64FolderName) err = os.Mkdir(base64FolderPath, 0755) if err != nil { fmt.Println(&amp;#34;无法创建 base64 文件夹:&amp;#34;, err) return } // 遍历文件夹 err = filepath.</description>
    </item>
    <item>
      <title>golang两个线程交替打印1-100的奇数偶数</title>
      <link>http://zhaoguibin.me/posts/golang%E4%B8%A4%E4%B8%AA%E7%BA%BF%E7%A8%8B%E4%BA%A4%E6%9B%BF%E6%89%93%E5%8D%B01-100%E7%9A%84%E5%A5%87%E6%95%B0%E5%81%B6%E6%95%B0/</link>
      <pubDate>Thu, 31 Jan 2019 13:39:38 +0000</pubDate>
      <guid>http://zhaoguibin.me/posts/golang%E4%B8%A4%E4%B8%AA%E7%BA%BF%E7%A8%8B%E4%BA%A4%E6%9B%BF%E6%89%93%E5%8D%B01-100%E7%9A%84%E5%A5%87%E6%95%B0%E5%81%B6%E6%95%B0/</guid>
      <description>启动两个线程, 一个输出 1,3,5,7…99, 另一个输出 2,4,6,8…100 最后 STDOUT 中按序输出 1,2,3,4,5…100
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) var pool = 100 //奇数 func oddNum(c chan int) { for i := 1; i &amp;lt;= pool; i++ { c &amp;lt;- i if i%2 == 1 { fmt.Println(i) } } } //偶数 func even(c chan int) { for i := 1; i &amp;lt;= pool; i++ { &amp;lt;-c if i%2 == 0 { fmt.Println(i) } } } func main() { c := make(chan int) go oddNum(c) go even(c) time.</description>
    </item>
    <item>
      <title>golang抓取知乎图片</title>
      <link>http://zhaoguibin.me/posts/golang%E6%8A%93%E5%8F%96%E7%9F%A5%E4%B9%8E%E5%9B%BE%E7%89%87/</link>
      <pubDate>Sat, 26 Jan 2019 10:56:31 +0000</pubDate>
      <guid>http://zhaoguibin.me/posts/golang%E6%8A%93%E5%8F%96%E7%9F%A5%E4%B9%8E%E5%9B%BE%E7%89%87/</guid>
      <description>代码github地址 https://github.com/zhaoguibin/zhihu_pic
需要安装 gjson go get -u github.com/tidwall/gjson package main import ( &amp;#34;bytes&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;io&amp;#34; &amp;#34;io/ioutil&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;os&amp;#34; &amp;#34;regexp&amp;#34; &amp;#34;strings&amp;#34; &amp;#34;github.com/tidwall/gjson&amp;#34; &amp;#34;bufio&amp;#34; &amp;#34;strconv&amp;#34; &amp;#34;time&amp;#34; ) var quit = make(chan int) func main() { url := urlExists() dirName := strconv.FormatInt(time.Now().Unix(), 10) imgDir := &amp;#34;./&amp;#34; + dirName + &amp;#34;/&amp;#34; _, errs := pathExists(imgDir) if errs != nil { fmt.Printf(&amp;#34;创建文件失败&amp;#34;) return } getImgURL(url, imgDir) } //获取图片地址 func getImgURL(url, imgDir string) { //提交请求 reqest, err := http.</description>
    </item>
    <item>
      <title>安装golang</title>
      <link>http://zhaoguibin.me/posts/%E5%AE%89%E8%A3%85golang/</link>
      <pubDate>Sat, 02 Dec 2017 14:31:45 +0000</pubDate>
      <guid>http://zhaoguibin.me/posts/%E5%AE%89%E8%A3%85golang/</guid>
      <description>到官方https://golang.org/dl/
或者 https://www.golangtc.com/download 下载安装包
wget https://www.golangtc.com/static/go/1.9/go1.9.linux-amd64.tar.gz tar zxvf go1.9.linux-amd64.tar.gz -C /usr/local 新建GOPATH目录
mkdir -p /www/golang vim /etc/profile export GOROOT=/usr/local/go export GOBIN=$GOROOT/bin export PATH=$PATH:$GOBIN export GOPATH=/www/golang :wq保存 使其生效
source /etc/profile 查看是否配置成功
go version go version go1.9 linux/amd64 简单测试：
cd /www/golang vim hello.go package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(&amp;#34;Hello, world&amp;#34;) } :wq go run hello.go Hello, world </description>
    </item>
  </channel>
</rss>
